-- Pet Level-Up GUI by Chazai (Now with Speedhub Title + Fully Draggable)
-- Modified by Gemini for:
-- - Hooking the IN-GAME "Confirm" button in the "Insert Pet" UI.
-- - Controlling the IN-GAME timer on the mutation machine (no custom timer GUI).
-- - Visually hiding the held pet.
-- - NO mini-pet insertion.
-- - Displaying client-side "Do not leave game" warnings (temporary at top, combined persistent below GUI).
-- - Fixed persistent warning positioning and GUI height.
-- - Added aggressive debugging for persistent warning visibility.

print("--- Script Start ---")
print("Pet Level-Up Script: Initializing...")

local player = game:GetService("Players").LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")

print("Pet Level-Up Script: Services obtained.")

-- Ensure LocalPlayer and PlayerGui are available
if not player then
    warn("Pet Level-Up Script: ERROR - Could not get LocalPlayer. GUI will not appear.")
    return
end
print("Pet Level-Up Script: LocalPlayer found.")

local playerGui = player:WaitForChild("PlayerGui", 10)
if not playerGui then
    warn("Pet Level-Up Script: ERROR - PlayerGui not found. GUI will not appear.")
    return
end
print("Pet Level-Up Script: PlayerGui found.")

local gui = Instance.new("ScreenGui", playerGui)
gui.Name = "PetLevelUpVisual"
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
print("Pet Level-Up Script: Custom ScreenGui created.")

-- Main Frame (Your custom GUI)
local frame = Instance.new("Frame", gui)
frame.Name = "MainFrame"
frame.Size = UDim2.new(0, 260, 0, 240) -- Increased height again to ensure ample space for the warning
frame.Position = UDim2.new(0.5, -130, 0.5, -80)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Active = true
print("Pet Level-Up Script: MainFrame created with increased height.")

-- Add UICorner for rounded corners to MainFrame
local frameCorner = Instance.new("UICorner")
frameCorner.CornerRadius = UDim.new(0, 8)
frameCorner.Parent = frame

-- Title Above Frame (Speedhub - Fast Age)
local hubTitle = Instance.new("TextLabel", frame)
hubTitle.Name = "HubTitle"
hubTitle.Size = UDim2.new(1, 0, 0, 20)
hubTitle.Position = UDim2.new(0, 0, 0, -22)
hubTitle.BackgroundTransparency = 1
hubTitle.Text = "‚ö° Speedhub - Fast Age"
hubTitle.TextColor3 = Color3.fromRGB(255, 255, 0)
hubTitle.Font = Enum.Font.SourceSansBold
hubTitle.TextSize = 16
hubTitle.ZIndex = 2
print("Pet Level-Up Script: HubTitle created.")

-- Manual Draggable for the MainFrame
local dragging = false
local dragStart = Vector2.new(0, 0)
local startPos = UDim2.new(0,0,0,0)

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- GUI Inside Frame (using UIListLayout for better organization)
local uiListLayout = Instance.new("UIListLayout", frame)
uiListLayout.FillDirection = Enum.FillDirection.Vertical
uiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
uiListLayout.Padding = UDim.new(0, 5)

local uiPadding = Instance.new("UIPadding", frame)
uiPadding.PaddingTop = UDim.new(0, 10)
uiPadding.PaddingBottom = UDim.new(0, 10)
uiPadding.PaddingLeft = UDim.new(0, 10)
uiPadding.PaddingRight = UDim.new(0, 10)

local title = Instance.new("TextLabel", frame)
title.Name = "MainTitle"
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
title.Text = "üêæ Level Up Your Pet"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.ZIndex = 2

-- Add UICorner for rounded corners to MainTitle
local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = title

local userLabel = Instance.new("TextLabel", frame)
userLabel.Name = "UserLabel"
userLabel.Size = UDim2.new(1, 0, 0, 25)
userLabel.BackgroundTransparency = 1
userLabel.Text = "User: " .. player.Name
userLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
userLabel.Font = Enum.Font.SourceSans
userLabel.TextSize = 16
userLabel.ZIndex = 2

local levelUpButton = Instance.new("TextButton", frame)
levelUpButton.Name = "LevelUpButton"
levelUpButton.Size = UDim2.new(0.8, 0, 0, 40)
levelUpButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
levelUpButton.Text = "üî• Level Up 50+ Instantly"
levelUpButton.TextColor3 = Color3.new(1, 1, 1)
levelUpButton.Font = Enum.Font.SourceSansBold
levelUpButton.TextSize = 16
levelUpButton.ZIndex = 2

-- Add UICorner for rounded corners to LevelUpButton
local levelUpButtonCorner = Instance.new("UICorner")
levelUpButtonCorner.CornerRadius = UDim.new(0, 8)
levelUpButtonCorner.Parent = levelUpButton

local petInfo = Instance.new("TextLabel", frame)
petInfo.Name = "PetInfoLabel"
petInfo.Size = UDim2.new(1, 0, 0, 30)
petInfo.BackgroundTransparency = 1
petInfo.TextColor3 = Color3.fromRGB(180, 255, 180)
petInfo.Font = Enum.Font.SourceSans
petInfo.TextSize = 14
petInfo.Text = ""
petInfo.ZIndex = 2

local credit = Instance.new("TextLabel", frame)
credit.Name = "CreditLabel"
credit.Size = UDim2.new(1, 0, 0, 20)
credit.BackgroundTransparency = 1
credit.Text = "Created by Chazai"
credit.TextColor3 = Color3.fromRGB(150, 150, 150)
credit.Font = Enum.Font.SourceSansItalic
credit.TextSize = 14
credit.ZIndex = 2

-- Popup (for Level-Up confirmation)
local popup = Instance.new("TextLabel", gui)
popup.Name = "PopupMessage"
popup.Size = UDim2.new(0, 350, 0, 50)
popup.Position = UDim2.new(0.5, -175, 0.35, -25)
popup.BackgroundColor3 = Color3.fromRGB(50, 200, 100)
popup.Text = "üéâ Congrats! You got a Level 50 pet!"
popup.TextColor3 = Color3.new(1, 1, 1)
popup.Font = Enum.Font.SourceSansBold
popup.TextSize = 20
popup.Visible = false
popup.BorderSizePixel = 0
popup.TextWrapped = true
popup.ZIndex = 10

-- Add UICorner for rounded corners to Popup
local popupCorner = Instance.new("UICorner")
popupCorner.CornerRadius = UDim.new(0, 8)
popupCorner.Parent = popup

-- *** Submit Confirmation Pop-up (Your custom GUI) ***
local submitConfirmFrame = Instance.new("Frame", gui)
submitConfirmFrame.Name = "SubmitConfirmFrame"
submitConfirmFrame.Size = UDim2.new(0, 350, 0, 200)
submitConfirmFrame.Position = UDim2.new(0.5, -175, 0.5, -100)
submitConfirmFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
submitConfirmFrame.BorderSizePixel = 0
submitConfirmFrame.Visible = false
submitConfirmFrame.ZIndex = 11

-- Add UICorner for rounded corners to SubmitConfirmFrame
local submitConfirmCorner = Instance.new("UICorner")
submitConfirmCorner.CornerRadius = UDim.new(0, 8)
submitConfirmCorner.Parent = submitConfirmFrame

-- UIListLayout for content inside submitConfirmFrame
local confirmLayout = Instance.new("UIListLayout", submitConfirmFrame)
confirmLayout.FillDirection = Enum.FillDirection.Vertical
confirmLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
confirmLayout.Padding = UDim.new(0, 8)

local confirmPadding = Instance.new("UIPadding", submitConfirmFrame)
confirmPadding.PaddingTop = UDim.new(0, 10)
confirmPadding.PaddingBottom = UDim.new(0, 10)
confirmPadding.PaddingLeft = UDim.new(0, 10)
confirmPadding.PaddingRight = UDim.new(0, 10)

-- Close Button for Submit Confirmation Pop-up (Top Right 'X')
local closeConfirmButton = Instance.new("TextButton", submitConfirmFrame)
closeConfirmButton.Name = "CloseConfirmButton"
closeConfirmButton.Size = UDim2.new(0, 25, 0, 25)
closeConfirmButton.Position = UDim2.new(1, -35, 0, 10)
closeConfirmButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeConfirmButton.Text = "X"
closeConfirmButton.TextColor3 = Color3.new(1, 1, 1)
closeConfirmButton.Font = Enum.Font.SourceSansBold
closeConfirmButton.TextSize = 18
closeConfirmButton.BorderSizePixel = 0
closeConfirmButton.ZIndex = 12

-- Add UICorner for rounded corners to CloseConfirmButton
local closeConfirmCorner = Instance.new("UICorner")
closeConfirmCorner.CornerRadius = UDim.new(0, 8)
closeConfirmCorner.Parent = closeConfirmButton

-- Title Text
local confirmTitle = Instance.new("TextLabel", submitConfirmFrame)
confirmTitle.Name = "ConfirmTitle"
confirmTitle.Size = UDim2.new(1, 0, 0, 30)
confirmTitle.BackgroundTransparency = 1
confirmTitle.Text = "Are you sure you want to submit that pet?"
confirmTitle.TextColor3 = Color3.new(1, 1, 1)
confirmTitle.Font = Enum.Font.SourceSansBold
confirmTitle.TextSize = 18
confirmTitle.TextWrapped = true
confirmTitle.ZIndex = 12
confirmTitle.LayoutOrder = 1

-- Pet Info Text (Dynamic)
local confirmPetInfo = Instance.new("TextLabel", submitConfirmFrame)
confirmPetInfo.Name = "ConfirmPetInfo"
confirmPetInfo.Size = UDim2.new(1, 0, 0, 25)
confirmPetInfo.BackgroundTransparency = 1
confirmPetInfo.TextColor3 = Color3.fromRGB(255, 255, 0)
confirmPetInfo.Font = Enum.Font.SourceSansBold
confirmPetInfo.TextSize = 16
confirmPetInfo.TextWrapped = true
confirmPetInfo.ZIndex = 12
confirmPetInfo.LayoutOrder = 2

-- Warning Text
local confirmWarning = Instance.new("TextLabel", submitConfirmFrame)
confirmWarning.Name = "ConfirmWarning"
confirmWarning.Size = UDim2.new(1, 0, 0, 25)
confirmWarning.BackgroundTransparency = 1
confirmWarning.Text = "Your pet will reset back to age 1."
confirmWarning.TextColor3 = Color3.new(1, 1, 1)
confirmWarning.Font = Enum.Font.SourceSans
confirmWarning.TextSize = 14
confirmWarning.TextWrapped = true
confirmWarning.ZIndex = 12
confirmWarning.LayoutOrder = 3

-- Buttons Container for Cancel/Confirm
local buttonContainer = Instance.new("Frame", submitConfirmFrame)
buttonContainer.Name = "ButtonContainer"
buttonContainer.Size = UDim2.new(1, 0, 0, 40)
buttonContainer.BackgroundTransparency = 1
buttonContainer.ZIndex = 12
buttonContainer.LayoutOrder = 4

local buttonListLayout = Instance.new("UIListLayout", buttonContainer)
buttonListLayout.FillDirection = Enum.FillDirection.Horizontal
buttonListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
buttonListLayout.Padding = UDim.new(0, 10)

-- Cancel Button
local cancelButton = Instance.new("TextButton", buttonContainer)
cancelButton.Name = "CancelButton"
cancelButton.Size = UDim2.new(0.45, 0, 1, 0)
cancelButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
cancelButton.Text = "Cancel"
cancelButton.TextColor3 = Color3.new(1, 1, 1)
cancelButton.Font = Enum.Font.SourceSansBold
cancelButton.TextSize = 16
cancelButton.BorderSizePixel = 0
cancelButton.ZIndex = 13

-- Add UICorner for rounded corners to CancelButton
local cancelCorner = Instance.new("UICorner")
cancelCorner.CornerRadius = UDim.new(0, 8)
cancelCorner.Parent = cancelButton

-- Confirm Button
local confirmButton = Instance.new("TextButton", buttonContainer)
confirmButton.Name = "ConfirmButton"
confirmButton.Size = UDim2.new(0.45, 0, 1, 0)
confirmButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
confirmButton.Text = "Confirm"
confirmButton.TextColor3 = Color3.new(1, 1, 1)
confirmButton.Font = Enum.Font.SourceSansBold
confirmButton.TextSize = 16
confirmButton.BorderSizePixel = 0
confirmButton.ZIndex = 13

-- Add UICorner for rounded corners to ConfirmButton
local confirmCorner = Instance.new("UICorner")
confirmCorner.CornerRadius = UDim.new(0, 8)
confirmCorner.Parent = confirmButton

-- Held Tool Finder
local function getHeldTool()
    print("Pet Level-Up Script: getHeldTool() called.")
    if not char then
        print("Pet Level-Up Script: getHeldTool() - Character is nil.")
        return nil
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:IsA("Tool") then
            print("Pet Level-Up Script: getHeldTool() - Found tool:", v.Name)
            return v
        end
    end
    print("Pet Level-Up Script: getHeldTool() - No tool found in character.")
    return nil
end

-- Show Popup (original level-up confirmation)
local function showPopup(msg)
    popup.Text = msg
    popup.Visible = true
    task.delay(3, function()
        popup.Visible = false
    end)
end

-- Update Pet Age
local function levelUpPet(tool)
    print("Pet Level-Up Script: levelUpPet() called with tool:", tool and tool.Name or "nil")
    if tool then
        local originalName = tool.Name
        print("Pet Level-Up Script: Original pet name:", originalName)
        -- Pattern to replace "Age X" with "Age 50"
        local updated = originalName:gsub("Age%s%d+", "Age 50")
        
        print("Pet Level-Up Script: Name after gsub attempt:", updated)

        if updated ~= originalName then
            local success, err = pcall(function()
                tool.Name = updated
            end)
            if success then
                print("Pet Level-Up Script: Successfully updated pet name to:", tool.Name)
                petInfo.Text = "‚úÖ Pet leveled to Age 50: " .. tool.Name
                showPopup("üéâ Congrats! You got a Level 50 pet!")
            else
                warn("Pet Level-Up Script: ERROR - Failed to set tool.Name:", err)
                petInfo.Text = "‚ùå Error updating pet name!"
            end
        else
            petInfo.Text = "‚ùå Couldn't find 'Age' in pet name to update, or already Age 50!"
            warn("Pet Level-Up Script: No 'Age' pattern found in pet name or already Age 50. Original name:", originalName)
        end
    else
        warn("Pet Level-Up Script: levelUpPet() called with nil tool.")
    end
end

-- *** In-Game Timer and Machine References ***
local inGameTimerLabel = nil
local mutationMachineModel = nil
local timerUpdateConnection = nil
local originalHeldPetRef = nil -- To hold the reference to the original held pet tool for hiding

-- *** ROBUST FINDER FOR IN-GAME TIMER AND MACHINE ***
local function findInGameTimerAndMachine()
    print("Pet Level-Up Script: Attempting robust search for in-game timer and machine...")
    local machines = CollectionService:GetTagged("PetMutationMachine")
    if #machines > 0 then
        mutationMachineModel = machines[1] -- Store the main machine model
        print("Pet Level-Up Script: Found main PetMutationMachine model:", mutationMachineModel:GetFullName())

        -- Iterate through all descendants to find the BillboardGui and then the TimerTextLabel
        for _, descendant in ipairs(mutationMachineModel:GetDescendants()) do
            if descendant:IsA("BillboardGui") then
                print("Pet Level-Up Script: Found BillboardGui at:", descendant:GetFullName())
                local timerLabel = descendant:FindFirstChild("TimerTextLabel") -- Assuming direct child
                if timerLabel and timerLabel:IsA("TextLabel") then
                    print("Pet Level-Up Script: Found in-game TimerTextLabel at:", timerLabel:GetFullName())
                    inGameTimerLabel = timerLabel
                    return true -- Found both, success!
                else
                    warn("Pet Level-Up Script: Found BillboardGui, but 'TimerTextLabel' not directly inside or not a TextLabel.")
                end
            end
        end
        warn("Pet Level-Up Script: No BillboardGui containing 'TimerTextLabel' found within PetMutationMachine model's descendants.")
    else
        warn("Pet Level-Up Script: Could not find any object tagged 'PetMutationMachine' in the workspace.")
    end
    return false
end

-- Initial attempt to find the timer and machine at script start
findInGameTimerAndMachine()

-- *** Function to update the IN-GAME timer visually and handle pet hiding ***
local function startInGameMutationVisuals(durationSeconds)
    print("Pet Level-Up Script: startInGameMutationVisuals called.")
    if timerUpdateConnection then
        timerUpdateConnection:Disconnect()
        print("Pet Level-Up Script: Disconnected previous in-game timer update.")
    end
    
    -- Ensure we have the timer label and machine model
    if not inGameTimerLabel or not mutationMachineModel then
        print("Pet Level-Up Script: Timer or machine not found before starting visuals. Retrying find...")
        if not findInGameTimerAndMachine() then -- Try finding again if not found
            warn("Pet Level-Up Script: CRITICAL - In-game timer or machine not found after retry. Cannot start timer or hide pet.")
            showPopup("‚ö†Ô∏è In-game timer not found! (Check console for details)")
            return
        end
    end

    local remaining = durationSeconds
    
    -- Connect to Heartbeat for stable, frequent updates to the in-game timer
    timerUpdateConnection = RunService.Heartbeat:Connect(function()
        -- Use a simple countdown for robustness across executors
        local minutes = math.floor(remaining / 60)
        local seconds = math.floor(remaining % 60)
        
        if inGameTimerLabel and inGameTimerLabel.Parent then -- Ensure label still exists
            inGameTimerLabel.Text = string.format("%02d:%02d", minutes, seconds)
        else
            warn("Pet Level-Up Script: In-game timer label disappeared, stopping update.")
            if timerUpdateConnection then
                timerUpdateConnection:Disconnect()
                timerUpdateConnection = nil
            end
            return
        end
        
        if remaining <= 0 then
            inGameTimerLabel.Text = "READY" -- Or whatever the game shows when ready
            if timerUpdateConnection then
                timerUpdateConnection:Disconnect()
                timerUpdateConnection = nil
            end
            -- Hide persistent warnings when timer finishes
            combinedWarningLabel.Visible = false
            print("Pet Level-Up Script: Combined persistent warning hidden (timer finished).")
            return
        end
        
        remaining = remaining - RunService.Heartbeat:Wait() -- Decrement by actual frame time
    end)

    -- *** Hide Original Pet ***
    originalHeldPetRef = getHeldTool() -- Get the currently held pet
    if originalHeldPetRef and originalHeldPetRef:IsA("Tool") and originalHeldPetRef.Parent == char then
        originalHeldPetRef.Parent = nil -- This visually removes it from the character
        print("Pet Level-Up Script: Original held pet visually hidden.")
    else
        warn("Pet Level-Up Script: No valid pet tool held for hiding, or already hidden.")
    end

    -- Show the client-side warning about not leaving the game (temporary at top)
    local tempLeaveWarning = Instance.new("TextLabel", playerGui)
    tempLeaveWarning.Name = "TempLeaveGameWarning"
    tempLeaveWarning.Size = UDim2.new(0, 300, 0, 40)
    tempLeaveWarning.Position = UDim2.new(0.5, -150, 0.1, 0) -- Top-center
    tempLeaveWarning.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    tempLeaveWarning.BackgroundTransparency = 0.2
    tempLeaveWarning.TextColor3 = Color3.fromRGB(255, 255, 255)
    tempLeaveWarning.Font = Enum.Font.SourceSansBold
    tempLeaveWarning.TextSize = 14
    tempLeaveWarning.Text = "DO NOT LEAVE GAME (TIMER WILL RESET)"
    tempLeaveWarning.TextWrapped = true
    tempLeaveWarning.ZIndex = 15 -- Ensure it's very visible
    local warningCorner = Instance.new("UICorner")
    warningCorner.CornerRadius = UDim.new(0, 8)
    warningCorner.Parent = tempLeaveWarning
    
    task.delay(10, function() -- Make the temporary warning disappear after 10 seconds
        if tempLeaveWarning and tempLeaveWarning.Parent then
            tempLeaveWarning:Destroy()
            print("Pet Level-Up Script: Client-side temporary leave warning destroyed.")
        end
    end)

    -- *** Make Persistent Warning Visible ***
    print("Pet Level-Up Script: Before setting combined warning visible: ", combinedWarningLabel.Visible)
    combinedWarningLabel.Visible = true
    print("Pet Level-Up Script: After setting combined warning visible: ", combinedWarningLabel.Visible)
end


-- Event Handlers for Submit Confirmation Pop-up (from our GUI)
-- This GUI's confirm button will ONLY level up the pet, not trigger timer/visuals.
closeConfirmButton.MouseButton1Click:Connect(function()
    submitConfirmFrame.Visible = false
    print("Submit Confirmation (GUI): Closed via X button.")
end)

cancelButton.MouseButton1Click:Connect(function()
    submitConfirmFrame.Visible = false
    print("Submit Confirmation (GUI): Canceled.")
end)

confirmButton.MouseButton1Click:Connect(function()
    local heldTool = getHeldTool()
    if heldTool then
        levelUpPet(heldTool) -- Proceed with leveling up
        print("Submit Confirmation (GUI): Confirmed. Pet leveled up.")
    else
        petInfo.Text = "‚ùå No pet held to level up after GUI confirmation!"
        warn("Submit Confirmation (GUI): No pet held after confirmation.")
    end
    submitConfirmFrame.Visible = false
end)

-- Our GUI's Level Up Button (still triggers our GUI confirmation)
levelUpButton.MouseButton1Click:Connect(function()
    local heldTool = getHeldTool()
    if heldTool then
        local petName = heldTool.Name
        local petWeight = "N/A"
        local petAge = "N/A"

        local pattern = "(.-)%s%[(%d+%.?%d*)%sKG%]%s%[Age%s(%d+)%]"
        local matches = {petName:match(pattern)}
        if #matches >= 3 then
            petName = matches[1]
            petWeight = matches[2] .. " KG"
            petAge = "Age " .. matches[3]
        else
            local agePattern = "Age%s(%d+)"
            local ageMatch = petName:match(agePattern)
            if ageMatch then
                petAge = "Age " .. ageMatch
            end
        end

        confirmPetInfo.Text = string.format("%s [%s] [%s]", petName, petWeight, petAge)
        submitConfirmFrame.Visible = true
        print("Level Up Button (GUI): Showing submit confirmation for pet:", heldTool.Name)
    else
        petInfo.Text = "‚ùå Hold a pet to level up!"
        print("Level Up Button (GUI): No pet held.")
    end
end)

-- *** Hook the IN-GAME "Confirm" button in the "Insert Pet" UI ***
local inGameInsertPetUI = nil
local inGameConfirmButton = nil
local inGameConfirmConnection = nil

local function findAndConnectInGameConfirmButton()
    print("Pet Level-Up Script: Attempting to find in-game 'InsertPet' UI and 'Confirm' button...")
    inGameInsertPetUI = playerGui:FindFirstChild("InsertPet") -- This is the main UI frame
    
    if inGameInsertPetUI then
        print("Pet Level-Up Script: Found 'InsertPet' UI.")
        local confirmFrame = inGameInsertPetUI:FindFirstChild("ConfirmFrame") -- This is the frame containing the buttons
        if confirmFrame then
            print("Pet Level-Up Script: Found 'ConfirmFrame'.")
            inGameConfirmButton = confirmFrame:FindFirstChild("Confirm") -- This is the actual button
            if inGameConfirmButton and inGameConfirmButton:IsA("TextButton") then
                print("Pet Level-Up Script: Found in-game 'Confirm' button at:", inGameConfirmButton:GetFullName())
                
                if inGameConfirmConnection then
                    inGameConfirmConnection:Disconnect() -- Disconnect previous if re-connecting
                    print("Pet Level-Up Script: Disconnected previous in-game confirm button connection.")
                end
                inGameConfirmConnection = inGameConfirmButton.Activated:Connect(function()
                    print("Pet Level-Up Script: IN-GAME 'Confirm' button ACTIVATED!")
                    local heldTool = getHeldTool()
                    if heldTool then
                        -- Trigger all visual effects here, as per user's request
                        startInGameMutationVisuals(3600) -- Start 1-hour in-game timer and hide pet
                    else
                        print("Pet Level-Up Script: No pet held when in-game 'Confirm' button activated. Not starting timer/hiding pet.")
                    end
                end)
                print("Pet Level-Up Script: Successfully connected to in-game 'Confirm' button.")
                return true
            else
                warn("Pet Level-Up Script: Found ConfirmFrame, but could not find 'Confirm' TextButton directly inside it.")
            end
        else
            warn("Pet Level-Up Script: Found InsertPet UI, but could not find 'ConfirmFrame' directly inside it.")
        end
    else
        warn("Pet Level-Up Script: Could not find 'InsertPet' UI directly in PlayerGui.")
    end
    return false
end

-- Monitor for the InsertPet UI becoming enabled/visible, then try to connect
playerGui.ChildAdded:Connect(function(child)
    if child.Name == "InsertPet" and child:IsA("ScreenGui") then
        print("Pet Level-Up Script: 'InsertPet' ScreenGui added. Attempting to connect to its Confirm button.")
        task.wait(0.5) -- Give it a moment for children to load
        findAndConnectInGameConfirmButton()
    end
end)

-- Also try to connect immediately in case the UI is already there
findAndConnectInGameConfirmButton()

-- *** NEW: Combined Persistent Warning TextLabel below custom GUI ***
local combinedWarningLabel = Instance.new("TextLabel", frame) -- Parented to 'frame'
combinedWarningLabel.Name = "CombinedWarningLabel"
combinedWarningLabel.Size = UDim2.new(1, 0, 0, 40) -- Full width of parent frame, height 40 for two lines
combinedWarningLabel.BackgroundTransparency = 1
combinedWarningLabel.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green text
combinedWarningLabel.Font = Enum.Font.SourceSansBold
combinedWarningLabel.TextSize = 14
combinedWarningLabel.Text = "ü§ñ DO NOT LEAVE GAME (TIMER WILL RESET) ü§ñ\nDO NOT PUT MULTIPLE PET INSIDE IT WILL BUG OUT!!"
combinedWarningLabel.TextWrapped = true
combinedWarningLabel.TextXAlignment = Enum.TextXAlignment.Center -- Center text horizontally
combinedWarningLabel.TextYAlignment = Enum.TextYAlignment.Center -- Center text vertically within its bounds
combinedWarningLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black outline
combinedWarningLabel.TextStrokeTransparency = 0
combinedWarningLabel.ZIndex = 10 -- Above MainFrame content
combinedWarningLabel.LayoutOrder = 100 -- Set a high LayoutOrder to ensure it's at the very bottom
print("Pet Level-Up Script: Combined persistent warning TextLabel created.")
print("Pet Level-Up Script: combinedWarningLabel.Visible (after creation, before setting): ", combinedWarningLabel.Visible)
-- TEMPORARY: Make it visible by default for debugging purposes
combinedWarningLabel.Visible = true 
print("Pet Level-Up Script: combinedWarningLabel.Visible (after setting to true for debug): ", combinedWarningLabel.Visible)
print("Pet Level-Up Script: combinedWarningLabel.AbsolutePosition: ", combinedWarningLabel.AbsolutePosition)
print("Pet Level-Up Script: combinedWarningLabel.AbsoluteSize: ", combinedWarningLabel.AbsoluteSize)


print("Pet Level-Up Script: Initialization complete.")
print("--- Script End ---")
